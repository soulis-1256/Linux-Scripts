(defvar date_reveal false)
(defvar music_volume 0)
(defvar music_status "spotify_exit")
(defvar sink_scale_reveal false)
(defvar source_scale_reveal false)
(defvar source_muted false)
(defvar sink_muted false)
(defvar max_workspace 1)

(defpoll date :interval "1s"
  "date '+%a %d %b %Y'")

(defpoll time :interval "1s"
"date '+%H:%M'")

; not needed when there is systray+nm-applet running
;(defpoll network :interval "1s"
;  "scripts/network.sh type")

;(defpoll network_info :interval "1s"
;  "scripts/network.sh info")

(deflisten sink_volume
  "scripts/trace_audio_volume.sh sink")

(deflisten source_volume
  "scripts/trace_audio_volume.sh source")

(deflisten active_keymap
  "scripts/trace_active_keymap.sh")

(deflisten active_keymap_full
  "scripts/trace_active_keymap.sh full")

(deflisten music_info :initial ""
  "scripts/spotify_info.sh")

(deflisten workspaces :initial "[]"
  "scripts/get-workspaces.sh")

(deflisten current_workspace :initial "1"
  "scripts/get-active-workspace.sh")

(defwidget bar []
  (centerbox :class "main-container"
    (box :class "left" :space-evenly false
       (workspaces)
       (systray :class "systray" :spacing 10 :icon-size 20)
     ) 
     (box :class "center"
       :space-evenly false
       (music)
     )
     (box :class "right"
      :halign "end"
      :space-evenly false
       (mic)
       (sink)
       (resources)
       ; not needed when there is systray+nm-applet running
       ;(network)
       ; laptop only
       ;(_battery :status {EWW_BATTERY.BAT0.status}
       ;          :capacity {EWW_BATTERY.BAT0.capacity}
       ;          :charging "" :empty " " :low " " :medium " " :high " " :very-high " ")
       (active_keymap)
       (date)
       (power)
      )
  )
)

(defwidget workspaces []
  (eventbox :onscroll "scripts/change-active-workspace.sh {} ${current_workspace}" :class "workspaces-widget"
    (box :class "workspaces"
         :space-evenly false
         :spacing 2
      (label :text "${workspaces}${current_workspace}" :visible false)
      (for workspace in workspaces
          (box :visible "${workspace.windows > 0 || workspace.id <= current_workspace ? true : false}" :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
            (button :onclick "hyprctl dispatch workspace ${workspace.id}" "${workspace.id}"
            )
        )
      )
    )
  )
)


(defwidget date []
  (eventbox :onhover "eww update date_reveal=true"
            :onhoverlost "eww update date_reveal=false"
    (box :class "date"
        :space-evenly false
      (label :text {time})
      (revealer :transition "slideleft"
                :reveal {date_reveal}
        (label :text "${date}")
      )
    )
  )
)

; not needed when there is systray+nm-applet running
;(defwidget network []
;  (box :class "network"
;    (button :onclick "alacritty -T \"nmtui\" -e nmtui &"
;      (label :text {network} :tooltip {network_info})
;    )
;  )
;)

(defwidget active_keymap []
  (box :class "active_keymap"
    (label :text {active_keymap} :tooltip {active_keymap_full})
  )
)

(defwidget sink []
  (eventbox
    :onrightclick "pavucontrol &"
    :onmiddleclick "scripts/change_audio_volume.sh sink toggle"
    :onscroll "scripts/change_audio_volume.sh sink {}"
    (box :class "audio"
      :space-evenly false

      (metric :label "${sink_volume}% ${
        sink_muted ? "󰖁 ":
        sink_volume < 25 ? "󰕿 " :
          sink_volume < 75 ? "󰖀 " : "󰕾 "}"
          :onhover "eww update sink_scale_reveal=true"
          :onhoverlost "eww update sink_scale_reveal=false"
          :reveal {sink_scale_reveal}
          :value {sink_volume}
      )
    )
  )
)

(defwidget mic []
  (eventbox
    :onrightclick "pavucontrol &"
    :onmiddleclick "scripts/change_audio_volume.sh source toggle"
    :onscroll "scripts/change_audio_volume.sh source {}"
    (box :class "audio"
      :space-evenly false

      (metric :label "${source_volume}% ${
          source_volume == 0 || source_muted ? "󰍭 " : "󰍬 "}"
          :onhover "eww update source_scale_reveal=true"
          :onhoverlost "eww update source_scale_reveal=false"
          :reveal {source_scale_reveal}
          :value {source_volume}
      )
    )
  )
)

(defwidget resources []
  (box :class "resources" :orientation "h" :space-evenly false
    (box :class "ram"
      :tooltip "RAM: ${round(EWW_RAM.used_mem / 1000000000, 1)} (used) / ${round(EWW_RAM.total_mem / 1000000000, 1)} GB"
      (circular-progress
        :value {EWW_RAM.used_mem_perc}
        :start-at 25
        :thickness 2
        :class "ram-progress"
          (label :text "")
      )
    )
    (box :class "cpu"
      :tooltip "CPU: ${round(EWW_CPU.avg,1)}%"
      (circular-progress
        :value {EWW_CPU.avg}
        :start-at 25
        :thickness 2
        :class "cpu-progress"
          (label :text "󰍛")
      )
    )
  )
)

(defwidget metric [ label value onhover onhoverlost reveal]
  (box :orientation "h"
    :class "metric"
    :space-evenly false
    (eventbox :onhover {onhover}
              :onhoverlost {onhoverlost}
      (box :class "label" :space-evenly false label
        (revealer :transition "slideright" 
                  :reveal {reveal}
        (scale :min 0
               :max 101
               :active false
               :value value))))))

(defwidget power []
  (box :class "power"
    :orientation "h"
    :space-evenly false
    :spacing 10
    (button :onclick "sleep 0.1 && wlogout &" " ")
  )
)

(defwidget music []
  (box :class "music"
    :orientation "h"
    :space-evenly false
    :halign "center"
    :visible {music_status == "spotify_exit" ? false : true}
    (box :class "music-controls"
         :orientation "h"
         :space-evenly false
         (button :class "music-back" :onclick "playerctl --player spotify previous" "")
         (button :class "music-control" :onclick "scripts/spotify_control.sh"
          {music_status == "Paused" ? " " : " "}
         )
         (button :class "music-next" :onclick "playerctl next" ""))
    (box :class "music-info-outer"
    (box :class "music-info"
     (label :limit-width 40 :text {music_info != "" ? "${music_info} " : ""}))
    )
    (eventbox
      :onclick "scripts/app_switch.sh Spotify"
      :onscroll "scripts/spotify_volume.sh {}"
      :class "music-eventbox"
      (label :text " ${music_volume}%")
    )
  )
)

; laptop only
;(defwidget _battery [capacity status empty low medium high very-high charging]
;  (box :class "battery" :space-evenly false :spacing 8
;    (label :text "${status == 'Charging' ? charging : ""} ${
;      capacity < 5 ? empty :
;        capacity < 20 ? low :
;          capacity < 50 ? medium :
;            capacity < 75 ? high : very-high}" :tooltip "Status: ${status}
;Capacity: ${capacity}%")))

(defwindow bar
  :monitor 0
  :stacking "bg"
  :exclusive true
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "3%"
                      :anchor "top center")
  (bar))